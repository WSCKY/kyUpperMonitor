package kyLinkWaveTool;

import java.awt.BorderLayout;
import java.io.File;

import javax.swing.JFrame;

import org.dom4j.DocumentException;

import kyLink.kyLinkPackage;
import kyLink.decoder.kyLinkDecoder;
import kyLink.event.kyLinkDecodeEvent;
import kyLink.event.kyLinkDecodeEventListener;

public final class example extends JFrame implements kyLinkDecodeEventListener, Runnable {
	private static final long serialVersionUID = 1L;

	private static final char[] TestData = {
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0x88, 0x42, 0x00, 0x00, 0x94, 0xC2, 0x00, 0x80, 0x7D, 0x45, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x80, 0x3F, 0x20, 0x72,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0xF3, 0xFD, 0x7F, 0xBF, 0x2B, 0xD5, 0xEE, 0xBB, 0x73, 0x23, 0x3E, 0xBB, 0x99, 0xF1, 0x8F, 0xBA, 0xC2, 0xE0,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0xB8, 0x42, 0x00, 0x00, 0x90, 0xC2, 0x00, 0xC0, 0x80, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x40, 0xB1, 0x29,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0x3E, 0xFE, 0x7F, 0xBF, 0x7B, 0xEB, 0xDF, 0xBB, 0xD7, 0x47, 0x1D, 0xBB, 0x8E, 0xF3, 0x92, 0xBA, 0x4B, 0x6B,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0xDC, 0x42, 0x00, 0x00, 0xA4, 0xC2, 0x00, 0x10, 0x81, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0x3F, 0xCF, 0xB5,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0x82, 0xFE, 0x7F, 0xBF, 0xFA, 0x21, 0xD1, 0xBB, 0xE7, 0x61, 0xFC, 0xBA, 0xF5, 0x45, 0x94, 0xBA, 0x44, 0x9F,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x94, 0xC2, 0x00, 0xD0, 0x80, 0x45, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x82, 0x00,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0xB8, 0xFE, 0x7F, 0xBF, 0xCC, 0x79, 0xC3, 0xBB, 0xDF, 0x21, 0xC1, 0xBA, 0xCD, 0x7C, 0x96, 0xBA, 0x5B, 0x70,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0xB0, 0x42, 0x00, 0x00, 0x84, 0xC2, 0x00, 0xE0, 0x80, 0x45, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x36, 0xEC,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0xEB, 0xFE, 0x7F, 0xBF, 0xC4, 0x85, 0xB5, 0xBB, 0xEE, 0x1E, 0x85, 0xBA, 0x3D, 0xF2, 0x97, 0xBA, 0xAE, 0x73,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0x98, 0x42, 0x00, 0x00, 0x94, 0xC2, 0x00, 0x00, 0x7F, 0x45, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x40, 0x40, 0x9A, 0xF4,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0x14, 0xFF, 0x7F, 0xBF, 0x59, 0xB2, 0xA8, 0xBB, 0x29, 0x88, 0x18, 0xBA, 0xAB, 0xD7, 0x9A, 0xBA, 0xC5, 0x8C,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0xA4, 0x42, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x50, 0x80, 0x45, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x91,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0x35, 0xFF, 0x7F, 0xBF, 0xDF, 0x54, 0x9C, 0xBB, 0xD5, 0xAA, 0x33, 0xB9, 0x55, 0x40, 0x9D, 0xBA, 0x4B, 0x46,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0xBC, 0x42, 0x00, 0x00, 0x9C, 0xC2, 0x00, 0xE0, 0x80, 0x45, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x16, 0x3D,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0x51, 0xFF, 0x7F, 0xBF, 0x2C, 0x0E, 0x90, 0xBB, 0x00, 0x80, 0x80, 0x39, 0x7C, 0xA5, 0xA0, 0xBA, 0xCE, 0xDB,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0x98, 0x42, 0x00, 0x00, 0x80, 0x40, 0x00, 0xC0, 0x80, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3F, 0x1F, 0xD6,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0x66, 0xFF, 0x7F, 0xBF, 0xE5, 0x1B, 0x85, 0xBB, 0xC8, 0x3E, 0x2A, 0x3A, 0x48, 0x42, 0xA3, 0xBA, 0xC3, 0xF9,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0xC4, 0x42, 0x00, 0x00, 0x90, 0xC2, 0x00, 0x60, 0x7E, 0x45, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0xF8,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0x75, 0xFF, 0x7F, 0xBF, 0x4B, 0x8A, 0x73, 0xBB, 0x4B, 0xFD, 0x89, 0x3A, 0xC6, 0xF0, 0xA5, 0xBA, 0x37, 0x5B,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0xA4, 0x42, 0x00, 0x00, 0x30, 0xC2, 0x00, 0x60, 0x80, 0x45, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x40, 0x10, 0x9B,
		0x55, 0xAA, 0x02, 0x12, 0x10, 0x00, 0x80, 0xFF, 0x7F, 0xBF, 0x4D, 0xFF, 0x5F, 0xBB, 0x9A, 0x3C, 0xB8, 0x3A, 0x21, 0x14, 0xA9, 0xBA, 0x62, 0x4C,
		0x55, 0xAA, 0x02, 0x11, 0x18, 0x00, 0x00, 0x00, 0xBC, 0x42, 0x00, 0x00, 0x18, 0xC2, 0x00, 0xD0, 0x81, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xD3, 0x9E,
	};

	private kyLinkDecoder decoder = null;
	public example() {
		this.setTitle("kyLink Wave Tool");
		this.setSize(1000, 600);
		this.setResizable(false);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setLayout(new BorderLayout());

		kyLinkWTPane wtPanel = new kyLinkWTPane("TOOL EXAMPLE");

		this.add(wtPanel, BorderLayout.CENTER);
		this.setVisible(true);

		String root_path = System.getProperty("user.dir");
		root_path = root_path + File.separator + "cfgFile";
		String cfgFilePath = root_path + File.separator + "Packages.xml";
		try {
			wtPanel.setConfigFile(cfgFilePath);
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			System.err.println("Failed to set kylink configuration file");
		}

		decoder = new kyLinkDecoder();
		decoder.addDecodeListener(this);
		decoder.addDecodeListener(wtPanel);

		Thread example_t = new Thread(this);
		example_t.start();
		System.out.println("wait for decoder exit ...");
		try {
			example_t.join();
			do {
				Thread.sleep(100);
			} while(!decoder.isIdle());
			decoder.exit();
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		System.out.println("decode completed.");
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		int i = 0;
		byte[] tempBytes = new byte[TestData.length];
		for(i = 0; i < TestData.length; i ++) {
			tempBytes[i] = (byte) TestData[i];
		}
		System.out.println(TestData.length + " bytes push to decoder.");
		i = 0;
		do {
			try {
				decoder.push(tempBytes[i]);
			} catch (InterruptedException e) {
				System.err.println("failed to push origin data");
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			i ++;
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} while(i < TestData.length);
	}

	@Override
	public void getNewPackage(kyLinkDecodeEvent event) {
		// TODO Auto-generated method stub
		System.out.println("get package msg_id: " + ((kyLinkPackage)event.getSource()).msg_id);
	}
	@Override
	public void badCRCEvent(kyLinkDecodeEvent event) {
		// TODO Auto-generated method stub
		System.err.println("bad crc!");
	}

	@Override
	public void lenOverFlow(kyLinkDecodeEvent event) {
		// TODO Auto-generated method stub
		System.err.println("too large!");
	}

	public static void main(String[] args) {
		new example();
	}
}
